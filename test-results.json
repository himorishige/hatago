{
  "numTotalTestSuites": 26,
  "numPassedTestSuites": 26,
  "numFailedTestSuites": 0,
  "numPendingTestSuites": 0,
  "numTotalTests": 59,
  "numPassedTests": 29,
  "numFailedTests": 0,
  "numPendingTests": 3,
  "numTodoTests": 0,
  "snapshot": {
    "added": 0,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0,
    "didUpdate": false
  },
  "startTime": 1755331953267,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MCP Server Integration", "Full MCP Protocol Flow"],
          "fullName": "MCP Server Integration Full MCP Protocol Flow should handle complete MCP interaction flow",
          "status": "skipped",
          "title": "should handle complete MCP interaction flow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MCP Server Integration", "Full MCP Protocol Flow"],
          "fullName": "MCP Server Integration Full MCP Protocol Flow should handle progress notifications",
          "status": "skipped",
          "title": "should handle progress notifications",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["MCP Server Integration", "Full MCP Protocol Flow"],
          "fullName": "MCP Server Integration Full MCP Protocol Flow should handle errors properly",
          "status": "skipped",
          "title": "should handle errors properly",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953267,
      "endTime": 1755331953267,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/integration/mcp-server.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should create app with default options",
          "status": "passed",
          "title": "should create app with default options",
          "duration": 1.039792000000034,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should create app with custom name and version",
          "status": "passed",
          "title": "should create app with custom name and version",
          "duration": 3.999083999999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should apply plugins",
          "status": "passed",
          "title": "should apply plugins",
          "duration": 1.618167000000028,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should pass environment variables to context",
          "status": "passed",
          "title": "should pass environment variables to context",
          "duration": 0.12320799999997689,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should add health endpoint in HTTP mode",
          "status": "passed",
          "title": "should add health endpoint in HTTP mode",
          "duration": 0.5098340000000121,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "HTTP mode"],
          "fullName": "createApp HTTP mode should add root endpoint in HTTP mode",
          "status": "passed",
          "title": "should add root endpoint in HTTP mode",
          "duration": 0.3748750000000314,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "stdio mode"],
          "fullName": "createApp stdio mode should create server without app in stdio mode",
          "status": "passed",
          "title": "should create server without app in stdio mode",
          "duration": 0.11770799999999326,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "stdio mode"],
          "fullName": "createApp stdio mode should not add HTTP endpoints in stdio mode",
          "status": "passed",
          "title": "should not add HTTP endpoints in stdio mode",
          "duration": 0.057542000000012195,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "stdio mode"],
          "fullName": "createApp stdio mode should still apply plugins in stdio mode",
          "status": "passed",
          "title": "should still apply plugins in stdio mode",
          "duration": 0.1910829999999919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp", "getBaseUrl helper"],
          "fullName": "createApp getBaseUrl helper should extract base URL from request",
          "status": "passed",
          "title": "should extract base URL from request",
          "duration": 0.12445800000000418,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953546,
      "endTime": 1755331953554.1912,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/app.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Logger", "Log Level Management"],
          "fullName": "Logger Log Level Management should respect LOG_LEVEL environment variable",
          "status": "pending",
          "title": "should respect LOG_LEVEL environment variable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Log Level Management"],
          "fullName": "Logger Log Level Management should filter logs by level",
          "status": "pending",
          "title": "should filter logs by level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Log Level Management"],
          "fullName": "Logger Log Level Management should handle level hierarchy correctly",
          "status": "pending",
          "title": "should handle level hierarchy correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Log Level Management"],
          "fullName": "Logger Log Level Management should update global log level",
          "status": "pending",
          "title": "should update global log level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Output Format"],
          "fullName": "Logger Output Format should use pretty format by default",
          "status": "pending",
          "title": "should use pretty format by default",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Output Format"],
          "fullName": "Logger Output Format should use JSON format when configured",
          "status": "pending",
          "title": "should use JSON format when configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Output Format"],
          "fullName": "Logger Output Format should handle color output based on environment",
          "status": "pending",
          "title": "should handle color output based on environment",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Output Format"],
          "fullName": "Logger Output Format should disable colors when NO_COLOR is set",
          "status": "pending",
          "title": "should disable colors when NO_COLOR is set",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Transport Mode Handling"],
          "fullName": "Logger Transport Mode Handling should route all output to stderr in stdio mode",
          "status": "pending",
          "title": "should route all output to stderr in stdio mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Transport Mode Handling"],
          "fullName": "Logger Transport Mode Handling should route appropriately in HTTP mode",
          "status": "pending",
          "title": "should route appropriately in HTTP mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Transport Mode Handling"],
          "fullName": "Logger Transport Mode Handling should guard stdout in stdio mode",
          "status": "pending",
          "title": "should guard stdout in stdio mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "PII Masking"],
          "fullName": "Logger PII Masking should mask sensitive keys by default",
          "status": "pending",
          "title": "should mask sensitive keys by default",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "PII Masking"],
          "fullName": "Logger PII Masking should use Noren for advanced PII detection when enabled",
          "status": "pending",
          "title": "should use Noren for advanced PII detection when enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "PII Masking"],
          "fullName": "Logger PII Masking should handle Noren failure gracefully",
          "status": "pending",
          "title": "should handle Noren failure gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "PII Masking"],
          "fullName": "Logger PII Masking should allow disabling PII masking",
          "status": "pending",
          "title": "should allow disabling PII masking",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "PII Masking"],
          "fullName": "Logger PII Masking should handle custom redact keys",
          "status": "pending",
          "title": "should handle custom redact keys",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Child Logger"],
          "fullName": "Logger Child Logger should inherit configuration from parent",
          "status": "pending",
          "title": "should inherit configuration from parent",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Child Logger"],
          "fullName": "Logger Child Logger should preserve parent context in child",
          "status": "pending",
          "title": "should preserve parent context in child",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Child Logger"],
          "fullName": "Logger Child Logger should override parent context when same key is used",
          "status": "pending",
          "title": "should override parent context when same key is used",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Sampling and Rate Limiting"],
          "fullName": "Logger Sampling and Rate Limiting should respect sample rate",
          "status": "pending",
          "title": "should respect sample rate",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Sampling and Rate Limiting"],
          "fullName": "Logger Sampling and Rate Limiting should never sample fatal and error levels",
          "status": "pending",
          "title": "should never sample fatal and error levels",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Error Handling and Fallback"],
          "fullName": "Logger Error Handling and Fallback should handle write errors gracefully",
          "status": "pending",
          "title": "should handle write errors gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Error Handling and Fallback"],
          "fullName": "Logger Error Handling and Fallback should handle JSON serialization errors",
          "status": "pending",
          "title": "should handle JSON serialization errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Error Handling and Fallback"],
          "fullName": "Logger Error Handling and Fallback should exit process on fatal level",
          "status": "pending",
          "title": "should exit process on fatal level",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Metadata and Context"],
          "fullName": "Logger Metadata and Context should include transport and session information",
          "status": "pending",
          "title": "should include transport and session information",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Metadata and Context"],
          "fullName": "Logger Metadata and Context should format error information properly",
          "status": "pending",
          "title": "should format error information properly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["Logger", "Metadata and Context"],
          "fullName": "Logger Metadata and Context should handle method and tool context",
          "status": "pending",
          "title": "should handle method and tool context",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953267,
      "endTime": 1755331953267,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/logger.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should apply single plugin",
          "status": "passed",
          "title": "should apply single plugin",
          "duration": 1.6687080000000094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should apply multiple plugins in order",
          "status": "passed",
          "title": "should apply multiple plugins in order",
          "duration": 0.1286659999999813,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should handle async plugins",
          "status": "passed",
          "title": "should handle async plugins",
          "duration": 10.836416999999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should throw on plugin errors",
          "status": "passed",
          "title": "should throw on plugin errors",
          "duration": 0.8256669999999531,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should pass context to all plugins",
          "status": "passed",
          "title": "should pass context to all plugins",
          "duration": 0.9441249999999854,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should handle empty plugin array",
          "status": "passed",
          "title": "should handle empty plugin array",
          "duration": 0.18037499999996953,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["applyPlugins"],
          "fullName": "applyPlugins should allow plugins to modify context",
          "status": "passed",
          "title": "should allow plugins to modify context",
          "duration": 0.3020410000000311,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953537,
      "endTime": 1755331953552.302,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/plugins.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should register hello_hatago tool",
          "status": "passed",
          "title": "should register hello_hatago tool",
          "duration": 1.3956660000000056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should return text content without progress token",
          "status": "passed",
          "title": "should return text content without progress token",
          "duration": 0.26845800000000963,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should send progress notifications when token provided",
          "status": "passed",
          "title": "should send progress notifications when token provided",
          "duration": 0.6557499999999834,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should handle notification errors gracefully",
          "status": "passed",
          "title": "should handle notification errors gracefully",
          "duration": 0.5023749999999723,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should work without sendNotification function",
          "status": "passed",
          "title": "should work without sendNotification function",
          "duration": 0.08537499999999909,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["helloHatago plugin"],
          "fullName": "helloHatago plugin should send correct number of progress notifications",
          "status": "passed",
          "title": "should send correct number of progress notifications",
          "duration": 0.20825000000002092,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953537,
      "endTime": 1755331953540.5024,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/plugins/hello-hatago.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["createApp (Node.js adapter)"],
          "fullName": "createApp (Node.js adapter) should create app with default plugins",
          "status": "passed",
          "title": "should create app with default plugins",
          "duration": 2.5797919999999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp (Node.js adapter)"],
          "fullName": "createApp (Node.js adapter) should convert Node.js env to generic record",
          "status": "passed",
          "title": "should convert Node.js env to generic record",
          "duration": 0.752125000000035,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp (Node.js adapter)"],
          "fullName": "createApp (Node.js adapter) should use custom plugins when provided",
          "status": "passed",
          "title": "should use custom plugins when provided",
          "duration": 0.4667079999999828,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["createApp (Node.js adapter)"],
          "fullName": "createApp (Node.js adapter) should work in stdio mode",
          "status": "passed",
          "title": "should work in stdio mode",
          "duration": 0.11458399999997937,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953607,
      "endTime": 1755331953611.4668,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/adapter-node/tests/unit/app.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["stdio server"],
          "fullName": "stdio server should have stdio server implementation",
          "status": "passed",
          "title": "should have stdio server implementation",
          "duration": 0.5186249999999859,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": ["stdio server"],
          "fullName": "stdio server should export stdio server function",
          "status": "passed",
          "title": "should export stdio server function",
          "duration": 112.49654200000003,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1755331953493,
      "endTime": 1755331953605.4966,
      "status": "passed",
      "message": "",
      "name": "/Users/morishige/ghq/github.com/himorishige/hatago/packages/adapter-node/tests/unit/stdio.test.ts"
    }
  ]
}
