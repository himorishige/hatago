{"version":3,"sources":["../src/index.ts","../src/utils/update-checker.ts","../src/utils/error-handler.ts","../src/commands/config.ts","../src/commands/init.ts","../src/commands/dev.ts","../src/commands/add-server.ts","../src/commands/create-plugin.ts","../src/commands/scaffold.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander'\nimport { readFileSync } from 'fs'\nimport { fileURLToPath } from 'url'\nimport { dirname, join } from 'path'\nimport { checkForUpdates } from './utils/update-checker.js'\nimport { setupErrorHandling } from './utils/error-handler.js'\nimport { configCommand } from './commands/config.js'\nimport { initCommand } from './commands/init.js'\nimport { devCommand } from './commands/dev.js'\nimport { addServerCommand } from './commands/add-server.js'\nimport { createPluginCommand } from './commands/create-plugin.js'\nimport { scaffoldCommand } from './commands/scaffold.js'\n\n// Setup error handling first\nsetupErrorHandling()\n\n// Get package.json info\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nconst packagePath = join(__dirname, '../package.json')\nconst packageInfo = JSON.parse(readFileSync(packagePath, 'utf-8'))\n\n// Create main program\nconst program = new Command()\n\nprogram\n  .name('hatago')\n  .description('Command line interface for Hatago MCP server')\n  .version(packageInfo.version)\n  .option('-v, --verbose', 'Enable verbose output')\n  .option('--json', 'Output in JSON format')\n\n// Add commands\nprogram.addCommand(configCommand)\nprogram.addCommand(initCommand)\nprogram.addCommand(devCommand)\nprogram.addCommand(addServerCommand)\nprogram.addCommand(createPluginCommand)\nprogram.addCommand(scaffoldCommand)\n\n// Global options handling\nprogram.hook('preAction', (thisCommand) => {\n  const opts = thisCommand.optsWithGlobals()\n  \n  // Set global verbose flag\n  if (opts.verbose) {\n    process.env.HATAGO_VERBOSE = 'true'\n  }\n  \n  // Set global JSON output flag\n  if (opts.json) {\n    process.env.HATAGO_JSON_OUTPUT = 'true'\n  }\n})\n\n// Check for updates (async, don't block)\nif (process.env.NODE_ENV !== 'test') {\n  checkForUpdates(packageInfo.name, packageInfo.version)\n}\n\n// Parse command line arguments\nprogram.parse()\n\n// Show help if no command provided\nif (!process.argv.slice(2).length) {\n  program.outputHelp()\n}","import updateNotifier from 'update-notifier'\nimport { yellow, cyan } from 'colorette'\n\n/**\n * Check for updates asynchronously\n */\nexport function checkForUpdates(packageName: string, currentVersion: string): void {\n  try {\n    const notifier = updateNotifier({\n      pkg: { name: packageName, version: currentVersion },\n      updateCheckInterval: 1000 * 60 * 60 * 24, // 24 hours\n      shouldNotifyInNpmScript: false,\n    })\n\n    if (notifier.update) {\n      const { latest, current } = notifier.update\n      console.log(`\n${yellow('üì¶ Update available!')} ${current} ‚Üí ${cyan(latest)}\nRun ${cyan('npm install -g ' + packageName)} to update\n      `)\n    }\n  } catch {\n    // Silently ignore update check failures\n  }\n}","import { red, yellow } from 'colorette'\nimport { ConfigValidationError } from '@hatago/config'\n\n/**\n * CLI error with exit code\n */\nexport class CLIError extends Error {\n  constructor(\n    message: string,\n    public exitCode: number = 1\n  ) {\n    super(message)\n    this.name = 'CLIError'\n  }\n}\n\n/**\n * Format error for console output\n */\nfunction formatError(error: Error): string {\n  if (error instanceof ConfigValidationError) {\n    const lines = [\n      red('‚ùå Configuration validation failed:'),\n      '',\n    ]\n    \n    // Add Zod validation errors\n    for (const issue of error.zodError.issues) {\n      const path = issue.path.join('.')\n      lines.push(`${red('  ‚Ä¢')} ${path}: ${issue.message}`)\n    }\n    \n    return lines.join('\\\\n')\n  }\n  \n  if (error instanceof CLIError) {\n    return `${red('‚ùå')} ${error.message}`\n  }\n  \n  return `${red('‚ùå Unexpected error:')} ${error.message}`\n}\n\n/**\n * Handle process warnings\n */\nfunction handleWarning(warning: Error): void {\n  if (process.env.HATAGO_VERBOSE === 'true') {\n    console.warn(`${yellow('‚ö†Ô∏è  Warning:')} ${warning.message}`)\n  }\n}\n\n/**\n * Handle uncaught exceptions\n */\nfunction handleUncaughtException(error: Error): void {\n  console.error('\\\\n' + formatError(error))\n  \n  if (process.env.HATAGO_VERBOSE === 'true' && error.stack) {\n    console.error('\\\\nStack trace:')\n    console.error(error.stack)\n  }\n  \n  console.error('\\\\nThis is likely a bug. Please report it at: https://github.com/himorishige/hatago/issues')\n  process.exit(1)\n}\n\n/**\n * Handle unhandled promise rejections\n */\nfunction handleUnhandledRejection(reason: any): void {\n  const error = reason instanceof Error ? reason : new Error(String(reason))\n  handleUncaughtException(error)\n}\n\n/**\n * Setup global error handling\n */\nexport function setupErrorHandling(): void {\n  process.on('warning', handleWarning)\n  process.on('uncaughtException', handleUncaughtException)\n  process.on('unhandledRejection', handleUnhandledRejection)\n  \n  // Handle SIGINT gracefully\n  process.on('SIGINT', () => {\n    console.log('\\\\nüëã Goodbye!')\n    process.exit(0)\n  })\n}","import { Command } from 'commander'\nimport { writeFileSync, existsSync } from 'fs'\nimport { resolve } from 'path'\nimport { green, red, yellow, cyan } from 'colorette'\nimport {\n  loadConfig,\n  validateConfig,\n  generateConfigTemplate,\n  diagnoseConfig,\n  formatDiagnostics,\n  generateConfigFixes,\n  ConfigValidationError,\n  type HatagoConfig,\n} from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Handle validation command\n */\nasync function handleValidate(options: { fix?: boolean }): Promise<void> {\n  try {\n    const result = await loadConfig()\n    const report = diagnoseConfig(result.config)\n\n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        valid: !report.hasErrors,\n        issues: report.issues,\n        configPath: result.filepath,\n      })\n      return\n    }\n\n    // Console output\n    if (result.filepath) {\n      console.log(`üìã Checking configuration: ${cyan(result.filepath)}`)\n    } else {\n      console.log(`üìã Checking default configuration (no config file found)`)\n    }\n\n    console.log(formatDiagnostics(report))\n\n    if (report.hasErrors) {\n      if (options.fix && report.canAutoFix) {\n        console.log(`\\\\nüîß Applying automatic fixes...`)\n        const fixedConfig = generateConfigFixes(result.config)\n        \n        // Re-validate fixed config\n        const fixedReport = diagnoseConfig(fixedConfig)\n        if (!fixedReport.hasErrors) {\n          const configContent = JSON.stringify(fixedConfig, null, 2)\n          if (result.filepath) {\n            writeFileSync(result.filepath, configContent)\n            console.log(`${green('‚úÖ')} Configuration fixed and saved to ${result.filepath}`)\n          } else {\n            const defaultPath = resolve('hatago.config.json')\n            writeFileSync(defaultPath, configContent)\n            console.log(`${green('‚úÖ')} Configuration saved to ${defaultPath}`)\n          }\n        } else {\n          console.log(`${yellow('‚ö†Ô∏è')} Some issues could not be automatically fixed`)\n          console.log(formatDiagnostics(fixedReport))\n        }\n      }\n      throw new CLIError('Configuration validation failed', 1)\n    }\n\n    console.log(`\\\\n${green('‚úÖ')} Configuration is valid`)\n  } catch (error) {\n    if (error instanceof ConfigValidationError) {\n      const report = diagnoseConfig({} as HatagoConfig, error)\n      \n      if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n        outputResult({\n          valid: false,\n          issues: report.issues,\n        })\n        return\n      }\n\n      console.log(formatDiagnostics(report))\n      throw new CLIError('Configuration validation failed', 1)\n    }\n    throw error\n  }\n}\n\n/**\n * Handle doctor command\n */\nasync function handleDoctor(): Promise<void> {\n  try {\n    const result = await loadConfig({ validate: false })\n    const report = diagnoseConfig(result.config)\n\n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        configPath: result.filepath,\n        issues: report.issues,\n        canAutoFix: report.canAutoFix,\n        recommendations: [\n          'Run `hatago config validate --fix` to apply automatic fixes',\n          'Check external server connectivity with `hatago add-server <endpoint> --test`',\n          'Review tool mappings for potential conflicts',\n        ],\n      })\n      return\n    }\n\n    console.log(`üè• ${cyan('Hatago Configuration Doctor')}`)\n    console.log('=' .repeat(50))\n\n    if (result.filepath) {\n      console.log(`\\\\nüìã Configuration file: ${cyan(result.filepath)}`)\n    } else {\n      console.log(`\\\\nüìã Using default configuration (no config file found)`)\n    }\n\n    // Environment check\n    console.log(`\\\\nüåç Environment:`)\n    console.log(`   Node.js: ${process.version}`)\n    console.log(`   Platform: ${process.platform}`)\n    console.log(`   Working directory: ${process.cwd()}`)\n\n    // Configuration analysis\n    console.log(formatDiagnostics(report))\n\n    // Recommendations\n    console.log(`\\\\nüí° Recommendations:`)\n    const recommendations = [\n      'Run periodic health checks on external servers',\n      'Use HTTPS endpoints for production deployments',\n      'Set up proper authentication for external APIs',\n      'Review log levels based on your environment',\n    ]\n\n    recommendations.forEach(rec => {\n      console.log(`   ‚Ä¢ ${rec}`)\n    })\n\n    if (!report.hasErrors && !report.hasWarnings) {\n      console.log(`\\\\n${green('üéâ Your configuration looks great!')}`)\n    }\n  } catch (error) {\n    console.error(`\\\\n${red('‚ùå')} Doctor check failed: ${error}`)\n    throw new CLIError('Doctor check failed', 1)\n  }\n}\n\n/**\n * Handle init command\n */\nasync function handleInit(options: { force?: boolean }): Promise<void> {\n  const configPath = resolve('hatago.config.jsonc')\n\n  if (existsSync(configPath) && !options.force) {\n    throw new CLIError(\n      `Configuration file already exists: ${configPath}\\\\nUse --force to overwrite`,\n      1\n    )\n  }\n\n  const template = generateConfigTemplate()\n  writeFileSync(configPath, template)\n\n  outputResult(\n    { configPath, created: true },\n    `${green('‚úÖ')} Created configuration file: ${cyan(configPath)}`\n  )\n}\n\n/**\n * Handle get command\n */\nasync function handleGet(path?: string): Promise<void> {\n  const result = await loadConfig()\n\n  if (!path) {\n    outputResult(result.config, JSON.stringify(result.config, null, 2))\n    return\n  }\n\n  // Navigate to specific path\n  const parts = path.split('.')\n  let current: any = result.config\n  \n  for (const part of parts) {\n    if (current && typeof current === 'object' && part in current) {\n      current = current[part]\n    } else {\n      throw new CLIError(`Configuration path not found: ${path}`, 1)\n    }\n  }\n\n  outputResult(\n    { path, value: current },\n    JSON.stringify(current, null, 2)\n  )\n}\n\n/**\n * Create config command\n */\nexport const configCommand = new Command('config')\n  .description('Manage Hatago configuration')\n\nconfigCommand\n  .command('validate')\n  .description('Validate configuration file')\n  .option('--fix', 'Automatically fix common issues')\n  .action(handleValidate)\n\nconfigCommand\n  .command('doctor')\n  .alias('dr')\n  .description('Run comprehensive configuration diagnostics')\n  .action(handleDoctor)\n\nconfigCommand\n  .command('init')\n  .description('Create a new configuration file')\n  .option('-f, --force', 'Overwrite existing configuration file')\n  .action(handleInit)\n\nconfigCommand\n  .command('get [path]')\n  .description('Get configuration value(s)')\n  .action(handleGet)\n\n// Add help examples\nconfigCommand.on('--help', () => {\n  console.log(`\nExamples:\n  hatago config validate              Validate current configuration\n  hatago config validate --fix       Validate and auto-fix issues\n  hatago config doctor                Run comprehensive health check\n  hatago config init                  Create new configuration file\n  hatago config get                   Show entire configuration\n  hatago config get server.port      Get specific configuration value\n  hatago config get proxy.servers    Get proxy server list\n`)\n})","import { Command } from 'commander'\nimport { writeFileSync, existsSync, mkdirSync } from 'fs'\nimport { resolve, join } from 'path'\nimport { green, red, yellow, cyan, blue } from 'colorette'\nimport { generateConfigTemplate, type HatagoConfig } from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Project template types\n */\ntype ProjectTemplate = 'basic' | 'with-proxy' | 'plugin-only'\n\n/**\n * Project initialization options\n */\ninterface InitOptions {\n  template?: ProjectTemplate\n  name?: string\n  port?: number\n  force?: boolean\n  skipInstall?: boolean\n  packageManager?: 'npm' | 'pnpm' | 'yarn'\n}\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Generate package.json template\n */\nfunction generatePackageJson(projectName: string, template: ProjectTemplate): string {\n  const basePackage = {\n    name: projectName,\n    version: '0.1.0',\n    description: 'Hatago MCP server project',\n    type: 'module',\n    main: 'dist/index.js',\n    scripts: {\n      dev: 'hatago dev',\n      build: 'tsc',\n      start: 'node dist/index.js',\n      typecheck: 'tsc --noEmit',\n    },\n    keywords: ['hatago', 'mcp', 'server'],\n    author: '',\n    license: 'MIT',\n    dependencies: {\n      '@hono/mcp': 'file:../../docs/dist',\n      hono: '^4.6.0',\n    },\n    devDependencies: {\n      '@types/node': '^20.0.0',\n      typescript: '^5.0.0',\n    },\n  }\n\n  if (template === 'with-proxy' || template === 'plugin-only') {\n    basePackage.dependencies['@hatago/config'] = 'workspace:*'\n  }\n\n  return JSON.stringify(basePackage, null, 2)\n}\n\n/**\n * Generate TypeScript config\n */\nfunction generateTsConfig(): string {\n  return JSON.stringify({\n    extends: '../../tsconfig.base.json',\n    compilerOptions: {\n      outDir: './dist',\n      rootDir: './src',\n    },\n    include: ['src/**/*'],\n    exclude: ['node_modules', 'dist'],\n  }, null, 2)\n}\n\n/**\n * Generate basic server template\n */\nfunction generateBasicServer(projectName: string): string {\n  return `import { Hono } from 'hono'\nimport { serve } from '@hono/node-server'\nimport { McpServer } from '@hono/mcp'\nimport { StreamableHTTPTransport } from '@hono/mcp'\n\nconst app = new Hono()\nconst server = new McpServer({\n  name: '${projectName}',\n  version: '0.1.0',\n  description: 'A simple Hatago MCP server',\n})\n\n// Add a simple hello tool\nserver.registerTool({\n  name: 'hello',\n  description: 'Say hello with a custom message',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      message: {\n        type: 'string',\n        description: 'The message to include in the greeting',\n        default: 'world',\n      },\n    },\n  },\n}, async ({ message = 'world' }) => {\n  return {\n    content: [\n      {\n        type: 'text',\n        text: \\`Hello, \\${message}! This is your Hatago MCP server.\\`,\n      },\n    ],\n  }\n})\n\n// Health check endpoint\napp.get('/health', (c) => c.json({ status: 'ok', server: '${projectName}' }))\n\n// MCP endpoint\napp.all('/mcp', async (c) => {\n  const transport = new StreamableHTTPTransport()\n  await server.connect(transport)\n  return transport.handleRequest(c)\n})\n\n// Start server\nconst port = Number(process.env.PORT) || 8787\nconsole.log(\\`üöÄ \\${server.name} is running on http://localhost:\\${port}\\`)\nconsole.log(\\`üìã Health check: http://localhost:\\${port}/health\\`)\nconsole.log(\\`üîå MCP endpoint: http://localhost:\\${port}/mcp\\`)\n\nserve({\n  fetch: app.fetch,\n  port,\n})\n`\n}\n\n/**\n * Generate plugin-based server template\n */\nfunction generatePluginServer(projectName: string): string {\n  return `import { createHatagoApp } from '@hatago/core'\nimport { loadConfig } from '@hatago/config'\nimport { helloPlugin } from './plugins/hello.js'\n\nasync function main() {\n  // Load configuration\n  const { config } = await loadConfig()\n  \n  // Create Hatago app with plugins\n  const { app, server } = createHatagoApp({\n    name: '${projectName}',\n    version: '0.1.0',\n    description: 'A plugin-based Hatago MCP server',\n    config,\n    plugins: [\n      helloPlugin,\n    ],\n  })\n\n  // Start server\n  const port = config.server?.port || 8787\n  console.log(\\`üöÄ \\${server.name} is running on http://localhost:\\${port}\\`)\n  console.log(\\`üìã Health check: http://localhost:\\${port}/health\\`)\n  console.log(\\`üîå MCP endpoint: http://localhost:\\${port}/mcp\\`)\n\n  const { serve } = await import('@hono/node-server')\n  serve({\n    fetch: app.fetch,\n    port,\n  })\n}\n\nmain().catch(console.error)\n`\n}\n\n/**\n * Generate hello plugin template\n */\nfunction generateHelloPlugin(): string {\n  return `import type { HatagoPlugin } from '@hatago/core'\n\nexport const helloPlugin: HatagoPlugin = ({ server }) => {\n  server.registerTool({\n    name: 'hello',\n    description: 'Say hello with a custom message',\n    inputSchema: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n          description: 'The message to include in the greeting',\n          default: 'world',\n        },\n      },\n    },\n  }, async ({ message = 'world' }) => {\n    return {\n      content: [\n        {\n          type: 'text',\n          text: \\`Hello, \\${message}! This is from a Hatago plugin.\\`,\n        },\n      ],\n    }\n  })\n}\n`\n}\n\n/**\n * Generate .gitignore\n */\nfunction generateGitignore(): string {\n  return `# Dependencies\nnode_modules/\n.pnpm-lock.yaml\nyarn.lock\npackage-lock.json\n\n# Build output\ndist/\nbuild/\n\n# Environment variables\n.env\n.env.local\n.env.development\n.env.production\n\n# Logs\n*.log\nlogs/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# TypeScript\n*.tsbuildinfo\n`\n}\n\n/**\n * Generate README.md\n */\nfunction generateReadme(projectName: string, template: ProjectTemplate): string {\n  return `# ${projectName}\n\nA Hatago MCP server project${template === 'with-proxy' ? ' with external MCP proxy support' : template === 'plugin-only' ? ' using plugin architecture' : ''}.\n\n## Getting Started\n\n1. Install dependencies:\n   \\`\\`\\`bash\n   pnpm install\n   \\`\\`\\`\n\n2. Start development server:\n   \\`\\`\\`bash\n   pnpm dev\n   \\`\\`\\`\n\n3. Test the server:\n   \\`\\`\\`bash\n   curl http://localhost:8787/health\n   \\`\\`\\`\n\n## Available Commands\n\n- \\`pnpm dev\\` - Start development server with hot reload\n- \\`pnpm build\\` - Build the project\n- \\`pnpm start\\` - Start production server\n- \\`pnpm typecheck\\` - Run TypeScript type checking\n\n## Project Structure\n\n\\`\\`\\`\n${projectName}/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts          # Main server entry point\n${template === 'plugin-only' ? '‚îÇ   ‚îî‚îÄ‚îÄ plugins/\\n‚îÇ       ‚îî‚îÄ‚îÄ hello.ts      # Example plugin' : ''}\n‚îú‚îÄ‚îÄ hatago.config.jsonc   # Hatago configuration${template === 'with-proxy' ? ' (with proxy setup)' : ''}\n‚îú‚îÄ‚îÄ package.json\n‚îú‚îÄ‚îÄ tsconfig.json\n‚îî‚îÄ‚îÄ README.md\n\\`\\`\\`\n\n## Configuration\n\n${template === 'basic' ? 'This project uses a basic Hatago setup. Configuration is handled through environment variables and the main server file.' : 'Configuration is managed through \\`hatago.config.jsonc\\`. See the [Hatago documentation](https://hatago.dev/docs) for available options.'}\n\n## Adding Tools\n\n${template === 'basic' ? 'Add new MCP tools by registering them with the server instance in \\`src/index.ts\\`.' : 'Create new plugins in the \\`src/plugins/\\` directory and register them in \\`src/index.ts\\`.'}\n\n## Deployment\n\n1. Build the project:\n   \\`\\`\\`bash\n   pnpm build\n   \\`\\`\\`\n\n2. Start the production server:\n   \\`\\`\\`bash\n   pnpm start\n   \\`\\`\\`\n\nFor more information, visit the [Hatago documentation](https://hatago.dev).\n`\n}\n\n/**\n * Generate configuration template based on project type\n */\nfunction generateProjectConfig(template: ProjectTemplate, port: number): string {\n  if (template === 'basic') {\n    return generateConfigTemplate()\n  }\n\n  const config: Partial<HatagoConfig> = {\n    $schema: 'https://hatago.dev/schema/config.json',\n    server: {\n      port,\n      hostname: 'localhost',\n      cors: true,\n      timeout: 30000,\n    },\n    logging: {\n      level: 'info',\n      format: 'pretty',\n      output: 'console',\n    },\n    security: {\n      requireAuth: false,\n      allowedOrigins: ['*'],\n    },\n  }\n\n  if (template === 'with-proxy') {\n    config.proxy = {\n      servers: [],\n      namespaceStrategy: 'prefix',\n      conflictResolution: 'error',\n      namespace: {\n        separator: ':',\n        caseSensitive: false,\n        maxLength: 64,\n      },\n    }\n  }\n\n  return JSON.stringify(config, null, 2)\n}\n\n/**\n * Handle init command\n */\nasync function handleInit(projectPath: string, options: InitOptions): Promise<void> {\n  const {\n    template = 'basic',\n    name,\n    port = 8787,\n    force = false,\n    skipInstall = false,\n    packageManager = 'pnpm',\n  } = options\n\n  const fullPath = resolve(projectPath)\n  const projectName = name || projectPath\n\n  // Check if directory exists\n  if (existsSync(fullPath) && !force) {\n    throw new CLIError(\n      `Directory already exists: ${fullPath}\\\\nUse --force to overwrite`,\n      1\n    )\n  }\n\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    outputResult({\n      projectPath: fullPath,\n      projectName,\n      template,\n      created: true,\n    })\n    return\n  }\n\n  console.log(`\\\\nüöÄ ${cyan('Creating new Hatago project...')}`)\n  console.log(`üìÅ Project: ${blue(projectName)}`)\n  console.log(`üìÇ Location: ${fullPath}`)\n  console.log(`üé® Template: ${template}`)\n  console.log(`üåê Port: ${port}`)\n\n  // Create project directory\n  mkdirSync(fullPath, { recursive: true })\n\n  // Create src directory\n  const srcDir = join(fullPath, 'src')\n  mkdirSync(srcDir, { recursive: true })\n\n  // Generate files based on template\n  const files: Record<string, string> = {\n    'package.json': generatePackageJson(projectName, template),\n    'tsconfig.json': generateTsConfig(),\n    '.gitignore': generateGitignore(),\n    'README.md': generateReadme(projectName, template),\n    'hatago.config.jsonc': generateProjectConfig(template, port),\n  }\n\n  // Add main server file\n  if (template === 'basic') {\n    files['src/index.ts'] = generateBasicServer(projectName)\n  } else {\n    files['src/index.ts'] = generatePluginServer(projectName)\n    \n    if (template === 'plugin-only') {\n      const pluginsDir = join(srcDir, 'plugins')\n      mkdirSync(pluginsDir, { recursive: true })\n      files['src/plugins/hello.ts'] = generateHelloPlugin()\n    }\n  }\n\n  // Write all files\n  for (const [filePath, content] of Object.entries(files)) {\n    const fullFilePath = join(fullPath, filePath)\n    writeFileSync(fullFilePath, content)\n    console.log(`   ${green('‚úì')} ${filePath}`)\n  }\n\n  console.log(`\\\\n${green('‚úÖ')} Project created successfully!`)\n  \n  if (!skipInstall) {\n    console.log(`\\\\nüì¶ Installing dependencies with ${packageManager}...`)\n    console.log(`üí° Run \\`cd ${projectName} && ${packageManager} install\\` to install dependencies`)\n  }\n\n  console.log(`\\\\nüéØ Next steps:`)\n  console.log(`   1. cd ${projectName}`)\n  if (!skipInstall) {\n    console.log(`   2. ${packageManager} install`)\n  }\n  console.log(`   ${skipInstall ? '2' : '3'}. ${packageManager} dev`)\n  console.log(`\\\\nüìö Learn more: https://hatago.dev/docs`)\n}\n\n/**\n * Create init command\n */\nexport const initCommand = new Command('init')\n  .description('Initialize a new Hatago project')\n  .argument('<project-name>', 'Name of the project directory')\n  .option('-t, --template <type>', 'Project template (basic|with-proxy|plugin-only)', 'basic')\n  .option('-n, --name <name>', 'Project name (defaults to directory name)')\n  .option('-p, --port <port>', 'Server port', '8787')\n  .option('-f, --force', 'Overwrite existing directory')\n  .option('--skip-install', 'Skip dependency installation')\n  .option('--pm <manager>', 'Package manager (npm|pnpm|yarn)', 'pnpm')\n  .action(handleInit)\n\n// Add help examples\ninitCommand.on('--help', () => {\n  console.log(`\nExamples:\n  hatago init my-server                     Create basic server\n  hatago init my-server --template with-proxy  Create server with proxy support\n  hatago init my-server --template plugin-only Create plugin-based server\n  hatago init my-server --port 3000         Create server on custom port\n  hatago init my-server --force             Overwrite existing directory\n`)\n})","import { Command } from 'commander'\nimport { spawn, ChildProcess } from 'child_process'\nimport { watch } from 'fs'\nimport { resolve, join, dirname } from 'path'\nimport { existsSync } from 'fs'\nimport { green, red, yellow, cyan, blue, gray } from 'colorette'\nimport { loadConfig, type HatagoConfig } from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Development server options\n */\ninterface DevOptions {\n  port?: number\n  hostname?: string\n  watch?: string[]\n  verbose?: boolean\n  inspect?: boolean\n  inspectPort?: number\n  clearScreen?: boolean\n  open?: boolean\n}\n\n/**\n * Development server state\n */\ninterface DevServer {\n  process: ChildProcess | null\n  config: HatagoConfig\n  isRestarting: boolean\n  startTime: number\n}\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Clear screen if enabled\n */\nfunction clearScreen(enabled: boolean): void {\n  if (enabled && process.stdout.isTTY) {\n    process.stdout.write('\\\\x1b[2J\\\\x1b[0f')\n  }\n}\n\n/**\n * Format timestamp\n */\nfunction formatTime(): string {\n  return new Date().toLocaleTimeString('en-US', { hour12: false })\n}\n\n/**\n * Log with timestamp\n */\nfunction logWithTime(message: string, color = gray): void {\n  console.log(`${color(`[${formatTime()}]`)} ${message}`)\n}\n\n/**\n * Find TypeScript compiler\n */\nfunction findTscCommand(): string {\n  const tscPaths = [\n    'node_modules/.bin/tsc',\n    'pnpm exec tsc',\n    'npx tsc',\n    'tsc',\n  ]\n\n  for (const tscPath of tscPaths) {\n    try {\n      if (tscPath.includes('/')) {\n        if (existsSync(tscPath)) return tscPath\n      } else {\n        // Global command\n        return tscPath\n      }\n    } catch {\n      continue\n    }\n  }\n\n  return 'npx tsc'\n}\n\n/**\n * Build project\n */\nasync function buildProject(verbose: boolean): Promise<boolean> {\n  return new Promise((resolve) => {\n    const tscCommand = findTscCommand()\n    const args = tscCommand.split(' ')\n    const cmd = args.shift()!\n    \n    if (verbose) {\n      logWithTime(`Building with: ${tscCommand}`, cyan)\n    }\n\n    const buildProcess = spawn(cmd, args, {\n      stdio: verbose ? 'inherit' : 'pipe',\n      shell: true,\n    })\n\n    buildProcess.on('close', (code) => {\n      resolve(code === 0)\n    })\n\n    buildProcess.on('error', () => {\n      resolve(false)\n    })\n  })\n}\n\n/**\n * Start server process\n */\nfunction startServer(devServer: DevServer, options: DevOptions): void {\n  const { config } = devServer\n  const port = options.port || config.server?.port || 8787\n  const hostname = options.hostname || config.server?.hostname || 'localhost'\n\n  // Prepare Node.js arguments\n  const nodeArgs: string[] = []\n  \n  if (options.inspect) {\n    const inspectPort = options.inspectPort || 9229\n    nodeArgs.push(`--inspect=${inspectPort}`)\n  }\n\n  // Check if dist/index.js exists\n  const serverScript = resolve('dist/index.js')\n  if (!existsSync(serverScript)) {\n    throw new CLIError(\n      `Server script not found: ${serverScript}\\\\nRun build first or check your TypeScript configuration`,\n      1\n    )\n  }\n\n  nodeArgs.push(serverScript)\n\n  devServer.process = spawn('node', nodeArgs, {\n    stdio: 'inherit',\n    env: {\n      ...process.env,\n      PORT: String(port),\n      HOSTNAME: hostname,\n      NODE_ENV: 'development',\n      HATAGO_DEV: 'true',\n    },\n  })\n\n  devServer.startTime = Date.now()\n\n  devServer.process.on('close', (code) => {\n    if (!devServer.isRestarting) {\n      if (code === 0) {\n        logWithTime('Server stopped', yellow)\n      } else {\n        logWithTime(`Server exited with code ${code}`, red)\n      }\n    }\n  })\n\n  devServer.process.on('error', (error) => {\n    logWithTime(`Server error: ${error.message}`, red)\n  })\n\n  const startupTime = Date.now() - devServer.startTime\n  logWithTime(`üöÄ Server started in ${startupTime}ms`, green)\n  logWithTime(`üìã Health: http://${hostname}:${port}/health`, cyan)\n  logWithTime(`üîå MCP: http://${hostname}:${port}/mcp`, cyan)\n}\n\n/**\n * Stop server process\n */\nfunction stopServer(devServer: DevServer): Promise<void> {\n  return new Promise((resolve) => {\n    if (!devServer.process) {\n      resolve()\n      return\n    }\n\n    devServer.process.on('close', () => {\n      devServer.process = null\n      resolve()\n    })\n\n    devServer.process.kill('SIGTERM')\n    \n    // Force kill after 5 seconds\n    setTimeout(() => {\n      if (devServer.process) {\n        devServer.process.kill('SIGKILL')\n        devServer.process = null\n        resolve()\n      }\n    }, 5000)\n  })\n}\n\n/**\n * Restart server\n */\nasync function restartServer(devServer: DevServer, options: DevOptions): Promise<void> {\n  devServer.isRestarting = true\n  \n  logWithTime('üîÑ Restarting server...', yellow)\n  \n  await stopServer(devServer)\n  \n  // Build project\n  const buildSuccess = await buildProject(options.verbose || false)\n  if (!buildSuccess) {\n    logWithTime('‚ùå Build failed, keeping previous version', red)\n    devServer.isRestarting = false\n    return\n  }\n\n  startServer(devServer, options)\n  devServer.isRestarting = false\n}\n\n/**\n * Setup file watcher\n */\nfunction setupWatcher(devServer: DevServer, options: DevOptions): void {\n  const watchPaths = options.watch || ['src']\n  \n  for (const watchPath of watchPaths) {\n    if (!existsSync(watchPath)) {\n      logWithTime(`‚ö†Ô∏è  Watch path not found: ${watchPath}`, yellow)\n      continue\n    }\n\n    logWithTime(`üëÄ Watching: ${watchPath}`, gray)\n    \n    const watcher = watch(watchPath, { recursive: true }, (eventType, filename) => {\n      if (!filename) return\n      \n      // Ignore non-source files\n      if (!filename.endsWith('.ts') && !filename.endsWith('.js') && !filename.endsWith('.json')) {\n        return\n      }\n\n      // Ignore node_modules and dist\n      if (filename.includes('node_modules') || filename.includes('dist')) {\n        return\n      }\n\n      logWithTime(`üìù Changed: ${filename}`, gray)\n      \n      // Debounce restarts\n      clearTimeout((restartServer as any).timeout)\n      ;(restartServer as any).timeout = setTimeout(() => {\n        restartServer(devServer, options)\n      }, 300)\n    })\n\n    // Handle process exit\n    process.on('SIGINT', () => {\n      watcher.close()\n    })\n  }\n}\n\n/**\n * Open browser\n */\nfunction openBrowser(url: string): void {\n  const startCommand = process.platform === 'darwin' ? 'open' : \n                     process.platform === 'win32' ? 'start' : 'xdg-open'\n  \n  spawn(startCommand, [url], { stdio: 'ignore' })\n}\n\n/**\n * Handle dev command\n */\nasync function handleDev(options: DevOptions): Promise<void> {\n  try {\n    // Load configuration\n    const { config, filepath } = await loadConfig()\n    \n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        action: 'dev-start',\n        configPath: filepath,\n        config: {\n          port: options.port || config.server?.port || 8787,\n          hostname: options.hostname || config.server?.hostname || 'localhost',\n        },\n        watch: options.watch || ['src'],\n      })\n      return\n    }\n\n    clearScreen(options.clearScreen !== false)\n    \n    console.log(`\\\\nüî• ${cyan('Hatago Development Server')}`)\n    console.log('=' .repeat(50))\n    \n    if (filepath) {\n      logWithTime(`üìã Config: ${filepath}`, gray)\n    } else {\n      logWithTime('üìã Using default configuration', gray)\n    }\n\n    // Initialize dev server state\n    const devServer: DevServer = {\n      process: null,\n      config,\n      isRestarting: false,\n      startTime: 0,\n    }\n\n    // Build project first\n    logWithTime('üî® Building project...', cyan)\n    const buildSuccess = await buildProject(options.verbose || false)\n    \n    if (!buildSuccess) {\n      throw new CLIError('Initial build failed', 1)\n    }\n\n    // Start server\n    startServer(devServer, options)\n\n    // Setup file watching\n    setupWatcher(devServer, options)\n\n    // Open browser if requested\n    if (options.open) {\n      const hostname = options.hostname || config.server?.hostname || 'localhost'\n      const port = options.port || config.server?.port || 8787\n      const url = `http://${hostname}:${port}/health`\n      \n      setTimeout(() => {\n        openBrowser(url)\n        logWithTime(`üåê Opened browser: ${url}`, cyan)\n      }, 1000)\n    }\n\n    logWithTime('‚úÖ Development server ready', green)\n    \n    if (options.inspect) {\n      const inspectPort = options.inspectPort || 9229\n      logWithTime(`üîç Debugger: chrome://inspect (port ${inspectPort})`, blue)\n    }\n    \n    console.log(`\\\\n${gray('Press Ctrl+C to stop the server')}`)\n\n    // Handle graceful shutdown\n    process.on('SIGINT', async () => {\n      console.log(`\\\\n\\\\n${yellow('üõë Shutting down development server...')}`)\n      await stopServer(devServer)\n      console.log(`${green('‚úÖ')} Server stopped`)\n      process.exit(0)\n    })\n\n    process.on('SIGTERM', async () => {\n      await stopServer(devServer)\n      process.exit(0)\n    })\n\n  } catch (error) {\n    if (error instanceof CLIError) {\n      throw error\n    }\n    throw new CLIError(`Development server failed: ${error}`, 1)\n  }\n}\n\n/**\n * Create dev command\n */\nexport const devCommand = new Command('dev')\n  .description('Start development server with hot reload')\n  .option('-p, --port <port>', 'Server port', (val) => parseInt(val, 10))\n  .option('-H, --hostname <hostname>', 'Server hostname')\n  .option('-w, --watch <paths...>', 'Additional paths to watch for changes')\n  .option('--inspect', 'Enable Node.js inspector for debugging')\n  .option('--inspect-port <port>', 'Inspector port', (val) => parseInt(val, 10), 9229)\n  .option('--no-clear-screen', 'Disable clearing screen on restart')\n  .option('--open', 'Open browser after server starts')\n  .action(handleDev)\n\n// Add help examples\ndevCommand.on('--help', () => {\n  console.log(`\nExamples:\n  hatago dev                              Start development server\n  hatago dev --port 3000                 Start on custom port\n  hatago dev --hostname 0.0.0.0          Listen on all interfaces\n  hatago dev --watch src --watch config  Watch additional directories\n  hatago dev --inspect                   Enable debugging\n  hatago dev --open                      Open browser automatically\n`)\n})","import { Command } from 'commander'\nimport { writeFileSync, readFileSync } from 'fs'\nimport { resolve } from 'path'\nimport { green, red, yellow, cyan, blue } from 'colorette'\nimport { \n  loadConfig, \n  validateConfig,\n  type HatagoConfig,\n  type ProxyServerConfig,\n  ConfigValidationError \n} from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Add server options\n */\ninterface AddServerOptions {\n  id?: string\n  namespace?: string\n  description?: string\n  timeout?: number\n  authType?: 'bearer' | 'basic' | 'custom'\n  authToken?: string\n  authUsername?: string\n  authPassword?: string\n  test?: boolean\n  include?: string[]\n  exclude?: string[]\n  rename?: Record<string, string>\n  healthCheck?: boolean\n  interactive?: boolean\n  dry?: boolean\n}\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Test MCP server connectivity\n */\nasync function testMcpServer(endpoint: string, auth?: ProxyServerConfig['auth']): Promise<boolean> {\n  try {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    }\n\n    if (auth) {\n      if (auth.type === 'bearer' && auth.token) {\n        headers['Authorization'] = `Bearer ${auth.token}`\n      } else if (auth.type === 'basic' && auth.username && auth.password) {\n        const credentials = Buffer.from(`${auth.username}:${auth.password}`).toString('base64')\n        headers['Authorization'] = `Basic ${credentials}`\n      }\n    }\n\n    // Test initialize request\n    const initRequest = {\n      jsonrpc: '2.0',\n      id: 1,\n      method: 'initialize',\n      params: {\n        protocolVersion: '2025-06-18',\n        capabilities: {},\n        clientInfo: {\n          name: 'hatago-cli',\n          version: '0.1.0',\n        },\n      },\n    }\n\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(initRequest),\n    })\n\n    if (!response.ok) {\n      console.error(`‚ùå HTTP ${response.status}: ${response.statusText}`)\n      return false\n    }\n\n    const result = await response.json()\n    \n    if (result.error) {\n      console.error(`‚ùå MCP Error: ${result.error.message}`)\n      return false\n    }\n\n    console.log(`‚úÖ Server responded: ${result.result?.serverInfo?.name || 'Unknown'}`)\n    return true\n\n  } catch (error) {\n    console.error(`‚ùå Connection failed: ${error}`)\n    return false\n  }\n}\n\n/**\n * Prompt for interactive input\n */\nasync function promptInput(question: string, defaultValue?: string): Promise<string> {\n  return new Promise((resolve) => {\n    const { createInterface } = require('readline')\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    const prompt = defaultValue ? `${question} (${defaultValue}): ` : `${question}: `\n    \n    rl.question(prompt, (answer: string) => {\n      rl.close()\n      resolve(answer.trim() || defaultValue || '')\n    })\n  })\n}\n\n/**\n * Interactive server configuration\n */\nasync function interactiveConfig(endpoint: string): Promise<Partial<ProxyServerConfig>> {\n  console.log(`\\\\nüîß ${cyan('Interactive Configuration')}`)\n  console.log('=' .repeat(40))\n\n  const config: Partial<ProxyServerConfig> = {\n    endpoint,\n  }\n\n  // Basic info\n  config.id = await promptInput('Server ID', generateServerId(endpoint))\n  config.namespace = await promptInput('Namespace', config.id)\n  config.description = await promptInput('Description (optional)')\n\n  // Authentication\n  const needsAuth = await promptInput('Requires authentication? (y/N)', 'n')\n  if (needsAuth.toLowerCase() === 'y') {\n    const authType = await promptInput('Auth type (bearer/basic)', 'bearer') as 'bearer' | 'basic'\n    \n    config.auth = { type: authType }\n    \n    if (authType === 'bearer') {\n      config.auth.token = await promptInput('Bearer token')\n    } else if (authType === 'basic') {\n      config.auth.username = await promptInput('Username')\n      config.auth.password = await promptInput('Password')\n    }\n  }\n\n  // Advanced options\n  const advancedConfig = await promptInput('Configure advanced options? (y/N)', 'n')\n  if (advancedConfig.toLowerCase() === 'y') {\n    const timeoutStr = await promptInput('Timeout (ms)', '30000')\n    config.timeout = parseInt(timeoutStr, 10)\n\n    const enableHealthCheck = await promptInput('Enable health checks? (Y/n)', 'y')\n    if (enableHealthCheck.toLowerCase() !== 'n') {\n      config.healthCheck = {\n        enabled: true,\n        interval: 30000,\n        timeout: 5000,\n      }\n    }\n  }\n\n  return config\n}\n\n/**\n * Generate server ID from endpoint\n */\nfunction generateServerId(endpoint: string): string {\n  try {\n    const url = new URL(endpoint)\n    const hostname = url.hostname.replace(/\\\\./g, '-')\n    const port = url.port ? `-${url.port}` : ''\n    return `${hostname}${port}`\n  } catch {\n    return 'mcp-server'\n  }\n}\n\n/**\n * Update configuration file\n */\nasync function updateConfigFile(newServer: ProxyServerConfig, dryRun: boolean = false): Promise<void> {\n  const { config, filepath } = await loadConfig()\n  \n  if (!config.proxy) {\n    config.proxy = {\n      servers: [],\n      namespaceStrategy: 'prefix',\n      conflictResolution: 'error',\n      namespace: {\n        separator: ':',\n        caseSensitive: false,\n        maxLength: 64,\n      },\n    }\n  }\n\n  // Check for existing server with same ID\n  const existingIndex = config.proxy.servers.findIndex(s => s.id === newServer.id)\n  if (existingIndex >= 0) {\n    config.proxy.servers[existingIndex] = newServer\n    console.log(`‚úèÔ∏è  Updated existing server: ${cyan(newServer.id)}`)\n  } else {\n    config.proxy.servers.push(newServer)\n    console.log(`‚úÖ Added new server: ${cyan(newServer.id)}`)\n  }\n\n  // Validate updated configuration\n  try {\n    validateConfig(config)\n  } catch (error) {\n    if (error instanceof ConfigValidationError) {\n      console.error(`\\\\n${red('‚ùå')} Configuration validation failed:`)\n      for (const issue of error.zodError.issues) {\n        const path = issue.path.join('.')\n        console.error(`   ‚Ä¢ ${path}: ${issue.message}`)\n      }\n      throw new CLIError('Configuration validation failed', 1)\n    }\n    throw error\n  }\n\n  if (dryRun) {\n    console.log(`\\\\n${yellow('üìã')} Dry run - configuration not saved`)\n    console.log('Updated configuration:')\n    console.log(JSON.stringify(config, null, 2))\n    return\n  }\n\n  // Save configuration\n  const configPath = filepath || resolve('hatago.config.jsonc')\n  const configContent = JSON.stringify(config, null, 2)\n  writeFileSync(configPath, configContent)\n  \n  console.log(`üíæ Configuration saved to: ${configPath}`)\n}\n\n/**\n * Handle add-server command\n */\nasync function handleAddServer(endpoint: string, options: AddServerOptions): Promise<void> {\n  try {\n    if (!endpoint) {\n      throw new CLIError('Endpoint URL is required', 1)\n    }\n\n    // Validate endpoint URL\n    try {\n      new URL(endpoint)\n    } catch {\n      throw new CLIError(`Invalid endpoint URL: ${endpoint}`, 1)\n    }\n\n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        action: 'add-server',\n        endpoint,\n        options,\n      })\n      return\n    }\n\n    console.log(`\\\\nüîå ${cyan('Adding MCP Server')}`)\n    console.log('=' .repeat(40))\n    console.log(`üì° Endpoint: ${endpoint}`)\n\n    let serverConfig: Partial<ProxyServerConfig>\n\n    if (options.interactive) {\n      serverConfig = await interactiveConfig(endpoint)\n    } else {\n      // Build configuration from options\n      serverConfig = {\n        endpoint,\n        id: options.id || generateServerId(endpoint),\n        namespace: options.namespace,\n        description: options.description,\n        timeout: options.timeout || 30000,\n      }\n\n      // Add authentication if specified\n      if (options.authType) {\n        serverConfig.auth = {\n          type: options.authType,\n          token: options.authToken,\n          username: options.authUsername,\n          password: options.authPassword,\n        }\n      }\n\n      // Add tool configuration\n      if (options.include || options.exclude || options.rename) {\n        serverConfig.tools = {\n          include: options.include || ['*'],\n          exclude: options.exclude,\n          rename: options.rename,\n        }\n      }\n\n      // Add health check configuration\n      if (options.healthCheck) {\n        serverConfig.healthCheck = {\n          enabled: true,\n          interval: 30000,\n          timeout: 5000,\n        }\n      }\n    }\n\n    // Test connection if requested\n    if (options.test) {\n      console.log(`\\\\nüß™ ${yellow('Testing connection...')}`)\n      const testResult = await testMcpServer(endpoint, serverConfig.auth)\n      \n      if (!testResult) {\n        console.log(`\\\\n${yellow('‚ö†Ô∏è  Connection test failed, but server will still be added')}`)\n        console.log('You can test the connection later with: hatago test-server <id>')\n      } else {\n        console.log(`\\\\n${green('‚úÖ')} Connection test passed`)\n      }\n    }\n\n    // Update configuration\n    await updateConfigFile(serverConfig as ProxyServerConfig, options.dry)\n\n    if (!options.dry) {\n      console.log(`\\\\nüéØ Next steps:`)\n      console.log(`   1. Test the server: hatago test-server ${serverConfig.id}`)\n      console.log(`   2. Start development server: hatago dev`)\n      console.log(`   3. Verify tools are available via MCP endpoint`)\n    }\n\n  } catch (error) {\n    if (error instanceof CLIError) {\n      throw error\n    }\n    throw new CLIError(`Failed to add server: ${error}`, 1)\n  }\n}\n\n/**\n * Create add-server command\n */\nexport const addServerCommand = new Command('add-server')\n  .description('Add external MCP server to configuration')\n  .argument('<endpoint>', 'MCP server endpoint URL')\n  .option('-i, --id <id>', 'Server identifier')\n  .option('-n, --namespace <namespace>', 'Tool namespace')\n  .option('-d, --description <description>', 'Server description')\n  .option('-t, --timeout <timeout>', 'Request timeout in milliseconds', (val) => parseInt(val, 10))\n  .option('--auth-type <type>', 'Authentication type (bearer|basic|custom)')\n  .option('--auth-token <token>', 'Bearer token or API key')\n  .option('--auth-username <username>', 'Username for basic auth')\n  .option('--auth-password <password>', 'Password for basic auth')\n  .option('--test', 'Test connection before adding')\n  .option('--include <tools...>', 'Include specific tools (glob patterns)')\n  .option('--exclude <tools...>', 'Exclude specific tools (glob patterns)')\n  .option('--rename <mapping>', 'Rename tools (format: old=new,old2=new2)')\n  .option('--health-check', 'Enable health checks')\n  .option('--interactive', 'Interactive configuration mode')\n  .option('--dry', 'Show configuration changes without saving')\n  .action((endpoint, options) => {\n    // Parse rename mapping\n    if (options.rename) {\n      const pairs = options.rename.split(',')\n      options.rename = {}\n      for (const pair of pairs) {\n        const [old, newName] = pair.split('=')\n        if (old && newName) {\n          options.rename[old.trim()] = newName.trim()\n        }\n      }\n    }\n    \n    return handleAddServer(endpoint, options)\n  })\n\n// Add help examples\naddServerCommand.on('--help', () => {\n  console.log(`\nExamples:\n  # Basic server addition\n  hatago add-server http://localhost:8080/mcp\n  \n  # With custom configuration\n  hatago add-server http://localhost:8080/mcp \\\\\n    --id my-server \\\\\n    --namespace mytools \\\\\n    --description \"My custom MCP server\"\n  \n  # With authentication\n  hatago add-server https://api.example.com/mcp \\\\\n    --auth-type bearer \\\\\n    --auth-token \"your-api-token\"\n  \n  # With tool filtering\n  hatago add-server http://localhost:8080/mcp \\\\\n    --include \"calc.*\" \"time.*\" \\\\\n    --exclude \"debug.*\" \\\\\n    --rename \"oldName=newName,tool1=myTool\"\n  \n  # Interactive mode\n  hatago add-server http://localhost:8080/mcp --interactive\n  \n  # Test connection and dry run\n  hatago add-server http://localhost:8080/mcp --test --dry\n`)\n})","import { Command } from 'commander'\nimport { resolve, join, dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport { existsSync } from 'fs'\nimport { green, red, yellow, cyan, blue, gray } from 'colorette'\nimport { TemplateEngine, type TemplateContext, type TemplateConfig } from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Create plugin options\n */\ninterface CreatePluginOptions {\n  template?: string\n  output?: string\n  interactive?: boolean\n  dry?: boolean\n  includeTests?: boolean\n  includeReadme?: boolean\n  force?: boolean\n}\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Prompt for user input (simplified version)\n */\nasync function promptInput(question: string, defaultValue?: string): Promise<string> {\n  return new Promise((resolve) => {\n    const { createInterface } = require('readline')\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    const prompt = defaultValue ? `${question} (${defaultValue}): ` : `${question}: `\n    \n    rl.question(prompt, (answer: string) => {\n      rl.close()\n      resolve(answer.trim() || defaultValue || '')\n    })\n  })\n}\n\n/**\n * Prompt for confirmation\n */\nasync function promptConfirm(question: string, defaultValue = false): Promise<boolean> {\n  const answer = await promptInput(`${question} (${defaultValue ? 'Y/n' : 'y/N'})`, defaultValue ? 'y' : 'n')\n  return answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes'\n}\n\n/**\n * Prompt for selection\n */\nasync function promptSelect(question: string, choices: string[], defaultValue?: string): Promise<string> {\n  console.log(`\\\\n${question}`)\n  choices.forEach((choice, index) => {\n    const marker = choice === defaultValue ? '>' : ' '\n    console.log(`${marker} ${index + 1}. ${choice}`)\n  })\n  \n  const answer = await promptInput('Select option', defaultValue ? String(choices.indexOf(defaultValue) + 1) : '1')\n  const index = parseInt(answer, 10) - 1\n  \n  if (index >= 0 && index < choices.length) {\n    return choices[index]\n  }\n  \n  return defaultValue || choices[0]\n}\n\n/**\n * Interactive prompt for template configuration\n */\nasync function interactivePrompt(templateConfig: TemplateConfig): Promise<TemplateContext> {\n  const context: TemplateContext = {}\n\n  console.log(`\\\\nüîß ${cyan('Interactive Plugin Configuration')}`)\n  console.log('=' .repeat(50))\n  console.log(`Template: ${blue(templateConfig.displayName)}`)\n  console.log(`Description: ${gray(templateConfig.description)}`)\n  console.log('')\n\n  for (const prompt of templateConfig.prompts) {\n    // Skip conditional prompts if condition not met\n    if (prompt.when && !context[prompt.when]) {\n      continue\n    }\n\n    try {\n      switch (prompt.type) {\n        case 'input':\n          context[prompt.name] = await promptInput(prompt.message, prompt.default)\n          break\n\n        case 'confirm':\n          context[prompt.name] = await promptConfirm(prompt.message, prompt.default)\n          break\n\n        case 'select':\n          if (!prompt.choices) {\n            throw new Error(`Select prompt '${prompt.name}' must have choices`)\n          }\n          context[prompt.name] = await promptSelect(prompt.message, prompt.choices, prompt.default)\n          break\n\n        case 'array':\n          if (!prompt.itemPrompts) {\n            context[prompt.name] = []\n            break\n          }\n\n          const items: any[] = []\n          let addMore = true\n\n          console.log(`\\\\n${prompt.message}`)\n          \n          while (addMore) {\n            const item: any = {}\n            \n            console.log(`\\\\n  Adding item ${items.length + 1}:`)\n            \n            for (const itemPrompt of prompt.itemPrompts) {\n              switch (itemPrompt.type) {\n                case 'input':\n                  item[itemPrompt.name] = await promptInput(`    ${itemPrompt.message}`, itemPrompt.default)\n                  if (itemPrompt.required && !item[itemPrompt.name]) {\n                    console.log(`    ${red('Error:')} ${itemPrompt.message} is required`)\n                    item[itemPrompt.name] = await promptInput(`    ${itemPrompt.message}`)\n                  }\n                  break\n\n                case 'select':\n                  if (itemPrompt.choices) {\n                    item[itemPrompt.name] = await promptSelect(`    ${itemPrompt.message}`, itemPrompt.choices, itemPrompt.default)\n                  }\n                  break\n\n                case 'confirm':\n                  item[itemPrompt.name] = await promptConfirm(`    ${itemPrompt.message}`, itemPrompt.default)\n                  break\n              }\n            }\n            \n            items.push(item)\n            addMore = await promptConfirm('  Add another item?', false)\n          }\n\n          context[prompt.name] = items\n          break\n\n        default:\n          console.log(`${yellow('Warning:')} Unknown prompt type: ${prompt.type}`)\n      }\n    } catch (error) {\n      console.error(`${red('Error:')} Failed to process prompt '${prompt.name}': ${error}`)\n    }\n  }\n\n  return context\n}\n\n/**\n * Get templates directory\n */\nfunction getTemplatesDir(): string {\n  // Try to find templates directory\n  const __dirname = dirname(fileURLToPath(import.meta.url))\n  const possiblePaths = [\n    resolve('templates'),\n    resolve('node_modules/@hatago/templates'),\n    resolve(__dirname, '../../../templates'),\n    resolve(__dirname, '../../../../templates'),\n  ]\n\n  for (const path of possiblePaths) {\n    if (existsSync(path)) {\n      return path\n    }\n  }\n\n  throw new CLIError('Templates directory not found. Make sure you are in a Hatago project or have templates installed.', 1)\n}\n\n/**\n * Handle create-plugin command\n */\nasync function handleCreatePlugin(pluginName: string, options: CreatePluginOptions): Promise<void> {\n  try {\n    if (!pluginName) {\n      throw new CLIError('Plugin name is required', 1)\n    }\n\n    // Validate plugin name\n    if (!/^[a-zA-Z][a-zA-Z0-9-_]*$/.test(pluginName)) {\n      throw new CLIError('Plugin name must start with a letter and contain only letters, numbers, hyphens, and underscores', 1)\n    }\n\n    const templatesDir = getTemplatesDir()\n    const engine = new TemplateEngine()\n    \n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        action: 'create-plugin',\n        pluginName,\n        templatesDir,\n        options,\n      })\n      return\n    }\n\n    console.log(`\\\\nüîå ${cyan('Creating Hatago Plugin')}`)\n    console.log('=' .repeat(40))\n\n    // List available templates if no template specified\n    if (!options.template) {\n      const templates = engine.listTemplates(templatesDir)\n      const pluginTemplates = templates.filter(t => t.category === 'plugins')\n      \n      if (pluginTemplates.length === 0) {\n        throw new CLIError('No plugin templates found', 1)\n      }\n\n      if (options.interactive && pluginTemplates.length > 1) {\n        const choices = pluginTemplates.map(t => `${t.name} - ${t.description}`)\n        const selected = await promptSelect('Choose a template:', choices)\n        options.template = pluginTemplates[choices.indexOf(selected)].name\n      } else {\n        options.template = pluginTemplates[0].name\n      }\n    }\n\n    // Find template\n    const templateDir = engine.findTemplate(templatesDir, options.template)\n    if (!templateDir) {\n      throw new CLIError(`Template not found: ${options.template}`, 1)\n    }\n\n    // Validate template\n    const validation = engine.validateTemplate(templateDir)\n    if (!validation.valid) {\n      throw new CLIError(`Invalid template: ${validation.errors.join(', ')}`, 1)\n    }\n\n    // Load template configuration\n    const templateConfig = engine.loadTemplateConfig(templateDir)\n    \n    console.log(`üìã Template: ${blue(templateConfig.displayName)}`)\n    console.log(`üìù Description: ${templateConfig.description}`)\n\n    // Determine output directory\n    const outputDir = resolve(options.output || join('src', 'plugins'))\n    console.log(`üìÇ Output: ${outputDir}`)\n\n    // Check if plugin already exists\n    const pluginPath = join(outputDir, `${pluginName}.ts`)\n    if (existsSync(pluginPath) && !options.force) {\n      throw new CLIError(\n        `Plugin already exists: ${pluginPath}\\\\nUse --force to overwrite`,\n        1\n      )\n    }\n\n    // Build template context\n    let context: TemplateContext = {\n      name: pluginName,\n      version: '1.0.0',\n      timestamp: new Date().toISOString(),\n      author: 'Anonymous',\n      description: `${pluginName} plugin for Hatago`,\n    }\n\n    // Interactive configuration\n    if (options.interactive) {\n      const userContext = await interactivePrompt(templateConfig)\n      context = { ...context, ...userContext }\n    }\n\n    // Filter optional files\n    const includeOptional = {\n      tests: options.includeTests !== false,\n      readme: options.includeReadme !== false,\n    }\n\n    // Generate files\n    console.log(`\\\\nüî® ${yellow('Generating plugin files...')}`)\n    \n    const result = engine.generateFromTemplate(templateDir, outputDir, context, {\n      includeOptional: true,\n      dryRun: options.dry,\n    })\n\n    // Filter files based on options\n    const filteredFiles = result.files.filter(file => {\n      if (file.path.includes('.test.') && !includeOptional.tests) {\n        return false\n      }\n      if (file.path.includes('README.md') && !includeOptional.readme) {\n        return false\n      }\n      return true\n    })\n\n    // Show results\n    if (options.dry) {\n      console.log(`\\\\n${yellow('üìã')} Dry run - files not created:`)\n      filteredFiles.forEach(file => {\n        console.log(`   ${gray('‚Ä¢')} ${file.path}`)\n      })\n    } else {\n      console.log(`\\\\n${green('‚úÖ')} Plugin created successfully:`)\n      filteredFiles.forEach(file => {\n        console.log(`   ${green('‚úì')} ${file.path}`)\n      })\n\n      // Show next steps\n      console.log(`\\\\nüéØ Next steps:`)\n      console.log(`   1. Review the generated plugin: ${pluginPath}`)\n      console.log(`   2. Register plugin in your server: import { ${context.name}Plugin } from './plugins/${pluginName}.js'`)\n      console.log(`   3. Add to plugins array in createHatagoApp()`)\n      console.log(`   4. Start development server: hatago dev`)\n      \n      if (includeOptional.tests) {\n        console.log(`   5. Run tests: pnpm test ${pluginName}`)\n      }\n    }\n\n  } catch (error) {\n    if (error instanceof CLIError) {\n      throw error\n    }\n    throw new CLIError(`Failed to create plugin: ${error}`, 1)\n  }\n}\n\n/**\n * Create create-plugin command\n */\nexport const createPluginCommand = new Command('create-plugin')\n  .description('Create a new Hatago plugin from template')\n  .argument('<plugin-name>', 'Name of the plugin to create')\n  .option('-t, --template <name>', 'Template name to use')\n  .option('-o, --output <dir>', 'Output directory', 'src/plugins')\n  .option('-i, --interactive', 'Interactive configuration mode')\n  .option('--dry', 'Show what would be created without actually creating files')\n  .option('--no-tests', 'Skip test file generation')\n  .option('--no-readme', 'Skip README file generation')\n  .option('-f, --force', 'Overwrite existing plugin')\n  .action(handleCreatePlugin)\n\n// Add help examples\ncreatePluginCommand.on('--help', () => {\n  console.log(`\nExamples:\n  # Create basic plugin\n  hatago create-plugin my-tool\n  \n  # Interactive mode with custom template\n  hatago create-plugin my-tool --template basic --interactive\n  \n  # Custom output directory\n  hatago create-plugin my-tool --output plugins/\n  \n  # Dry run to preview\n  hatago create-plugin my-tool --dry\n  \n  # Skip optional files\n  hatago create-plugin my-tool --no-tests --no-readme\n  \n  # Force overwrite existing plugin\n  hatago create-plugin my-tool --force\n`)\n})","import { Command } from 'commander'\nimport { resolve, join, dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport { existsSync } from 'fs'\nimport { green, red, yellow, cyan, blue, gray } from 'colorette'\nimport { TemplateEngine, type TemplateContext, type TemplateConfig } from '@hatago/config'\nimport { CLIError } from '../utils/error-handler.js'\n\n/**\n * Scaffold options\n */\ninterface ScaffoldOptions {\n  template?: string\n  output?: string\n  category?: string\n  list?: boolean\n  info?: boolean\n  interactive?: boolean\n  dry?: boolean\n  force?: boolean\n  context?: string\n}\n\n/**\n * Output result based on JSON flag\n */\nfunction outputResult(data: any, message?: string): void {\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    console.log(JSON.stringify(data, null, 2))\n  } else if (message) {\n    console.log(message)\n  }\n}\n\n/**\n * Get templates directory\n */\nfunction getTemplatesDir(): string {\n  const __dirname = dirname(fileURLToPath(import.meta.url))\n  const possiblePaths = [\n    resolve('templates'),\n    resolve('node_modules/@hatago/templates'),\n    resolve(__dirname, '../../../templates'),\n    resolve(__dirname, '../../../../templates'),\n  ]\n\n  for (const path of possiblePaths) {\n    if (existsSync(path)) {\n      return path\n    }\n  }\n\n  throw new CLIError('Templates directory not found', 1)\n}\n\n/**\n * List available templates\n */\nasync function listTemplates(options: ScaffoldOptions): Promise<void> {\n  const templatesDir = getTemplatesDir()\n  const engine = new TemplateEngine()\n  const templates = engine.listTemplates(templatesDir)\n\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    outputResult({ templates })\n    return\n  }\n\n  console.log(`\\\\nüìö ${cyan('Available Templates')}`)\n  console.log('=' .repeat(50))\n\n  if (templates.length === 0) {\n    console.log(`${yellow('No templates found')}`)\n    return\n  }\n\n  // Group by category\n  const categories = new Map<string, TemplateConfig[]>()\n  for (const template of templates) {\n    const category = template.category || 'other'\n    if (!categories.has(category)) {\n      categories.set(category, [])\n    }\n    categories.get(category)!.push(template)\n  }\n\n  // Filter by category if specified\n  const categoriesToShow = options.category ? \n    [options.category] : \n    Array.from(categories.keys()).sort()\n\n  for (const category of categoriesToShow) {\n    const categoryTemplates = categories.get(category)\n    if (!categoryTemplates || categoryTemplates.length === 0) {\n      continue\n    }\n\n    console.log(`\\\\n${blue(`${category.toUpperCase()}:`)}`)\n    for (const template of categoryTemplates) {\n      const tags = template.tags?.length ? ` (${template.tags.join(', ')})` : ''\n      console.log(`  ${green('‚Ä¢')} ${template.name}${tags}`)\n      console.log(`    ${gray(template.description)}`)\n    }\n  }\n\n  console.log(`\\\\nüí° Use ${cyan('hatago scaffold --info <template>')} for detailed information`)\n  console.log(`üí° Use ${cyan('hatago scaffold <template> <name>')} to generate from template`)\n}\n\n/**\n * Show template information\n */\nasync function showTemplateInfo(templateName: string): Promise<void> {\n  const templatesDir = getTemplatesDir()\n  const engine = new TemplateEngine()\n  \n  const templateDir = engine.findTemplate(templatesDir, templateName)\n  if (!templateDir) {\n    throw new CLIError(`Template not found: ${templateName}`, 1)\n  }\n\n  const config = engine.loadTemplateConfig(templateDir)\n  const validation = engine.validateTemplate(templateDir)\n\n  if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n    outputResult({ \n      config, \n      validation,\n      templateDir,\n    })\n    return\n  }\n\n  console.log(`\\\\nüìã ${cyan('Template Information')}`)\n  console.log('=' .repeat(50))\n  console.log(`Name: ${blue(config.displayName)}`)\n  console.log(`ID: ${config.name}`)\n  console.log(`Category: ${config.category}`)\n  console.log(`Version: ${config.version}`)\n  console.log(`Author: ${config.author}`)\n  console.log(`Description: ${config.description}`)\n  \n  if (config.tags?.length) {\n    console.log(`Tags: ${config.tags.join(', ')}`)\n  }\n\n  console.log(`\\\\nüìÅ Files:`)\n  for (const file of config.files) {\n    const optional = file.optional ? gray(' (optional)') : ''\n    console.log(`  ${green('‚Ä¢')} ${file.output}${optional}`)\n    console.log(`    ${gray(file.description)}`)\n  }\n\n  if (config.prompts?.length) {\n    console.log(`\\\\n‚ùì Configuration:`)\n    for (const prompt of config.prompts) {\n      const required = prompt.required ? red(' *') : ''\n      console.log(`  ${green('‚Ä¢')} ${prompt.name}${required} (${prompt.type})`)\n      console.log(`    ${gray(prompt.message)}`)\n    }\n  }\n\n  if (config.dependencies?.length) {\n    console.log(`\\\\nüì¶ Dependencies:`)\n    config.dependencies.forEach(dep => console.log(`  ${green('‚Ä¢')} ${dep}`))\n  }\n\n  if (config.devDependencies?.length) {\n    console.log(`\\\\nüîß Dev Dependencies:`)\n    config.devDependencies.forEach(dep => console.log(`  ${green('‚Ä¢')} ${dep}`))\n  }\n\n  console.log(`\\\\n‚úÖ Validation: ${validation.valid ? green('Valid') : red('Invalid')}`)\n  if (!validation.valid) {\n    validation.errors.forEach(error => console.log(`  ${red('‚Ä¢')} ${error}`))\n  }\n\n  console.log(`\\\\nüí° Usage: ${cyan(`hatago scaffold ${templateName} <name>`)}`)}\n\n/**\n * Interactive prompt for complex prompts\n */\nasync function interactivePrompt(prompts: any[]): Promise<TemplateContext> {\n  const context: TemplateContext = {}\n  const { createInterface } = require('readline')\n\n  for (const prompt of prompts) {\n    if (prompt.when && !context[prompt.when]) {\n      continue\n    }\n\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    try {\n      switch (prompt.type) {\n        case 'input':\n          const defaultText = prompt.default ? ` (${prompt.default})` : ''\n          const answer = await new Promise<string>((resolve) => {\n            rl.question(`${prompt.message}${defaultText}: `, resolve)\n          })\n          context[prompt.name] = answer.trim() || prompt.default || ''\n          break\n\n        case 'confirm':\n          const defaultConfirm = prompt.default ? 'Y/n' : 'y/N'\n          const confirmAnswer = await new Promise<string>((resolve) => {\n            rl.question(`${prompt.message} (${defaultConfirm}): `, resolve)\n          })\n          const isYes = confirmAnswer.toLowerCase() === 'y' || \n                       confirmAnswer.toLowerCase() === 'yes' ||\n                       (confirmAnswer === '' && prompt.default)\n          context[prompt.name] = isYes\n          break\n\n        case 'select':\n          if (prompt.choices) {\n            console.log(`\\\\n${prompt.message}`)\n            prompt.choices.forEach((choice: string, index: number) => {\n              console.log(`  ${index + 1}. ${choice}`)\n            })\n            const selectAnswer = await new Promise<string>((resolve) => {\n              rl.question('Select option: ', resolve)\n            })\n            const selectedIndex = parseInt(selectAnswer, 10) - 1\n            context[prompt.name] = prompt.choices[selectedIndex] || prompt.choices[0]\n          }\n          break\n\n        default:\n          console.log(`${yellow('Warning:')} Unsupported prompt type: ${prompt.type}`)\n          context[prompt.name] = prompt.default\n      }\n    } finally {\n      rl.close()\n    }\n  }\n\n  return context\n}\n\n/**\n * Handle scaffold command\n */\nasync function handleScaffold(templateName?: string, outputName?: string, options: ScaffoldOptions = {}): Promise<void> {\n  try {\n    // Handle list and info commands\n    if (options.list) {\n      return await listTemplates(options)\n    }\n\n    if (options.info && templateName) {\n      return await showTemplateInfo(templateName)\n    }\n\n    if (!templateName) {\n      return await listTemplates(options)\n    }\n\n    if (!outputName) {\n      throw new CLIError('Output name is required when generating from template', 1)\n    }\n\n    const templatesDir = getTemplatesDir()\n    const engine = new TemplateEngine()\n\n    if (process.env.HATAGO_JSON_OUTPUT === 'true') {\n      outputResult({\n        action: 'scaffold',\n        template: templateName,\n        output: outputName,\n        templatesDir,\n        options,\n      })\n      return\n    }\n\n    console.log(`\\\\nüèóÔ∏è  ${cyan('Scaffolding from Template')}`)\n    console.log('=' .repeat(40))\n\n    // Find template\n    const templateDir = engine.findTemplate(templatesDir, templateName)\n    if (!templateDir) {\n      throw new CLIError(`Template not found: ${templateName}`, 1)\n    }\n\n    // Validate template\n    const validation = engine.validateTemplate(templateDir)\n    if (!validation.valid) {\n      throw new CLIError(`Invalid template: ${validation.errors.join(', ')}`, 1)\n    }\n\n    // Load template configuration\n    const config = engine.loadTemplateConfig(templateDir)\n    \n    console.log(`üìã Template: ${blue(config.displayName)}`)\n    console.log(`üìù Output: ${outputName}`)\n\n    // Determine output directory\n    const outputDir = resolve(options.output || '.')\n    console.log(`üìÇ Directory: ${outputDir}`)\n\n    // Check if output already exists\n    const outputPath = join(outputDir, outputName)\n    if (existsSync(outputPath) && !options.force) {\n      throw new CLIError(\n        `Output already exists: ${outputPath}\\\\nUse --force to overwrite`,\n        1\n      )\n    }\n\n    // Build template context\n    let context: TemplateContext = {\n      name: outputName,\n      version: '1.0.0',\n      timestamp: new Date().toISOString(),\n      author: 'Anonymous',\n      description: `Generated ${outputName}`,\n    }\n\n    // Load context from file if provided\n    if (options.context && existsSync(options.context)) {\n      try {\n        const contextFile = require('fs').readFileSync(options.context, 'utf-8')\n        const fileContext = JSON.parse(contextFile)\n        context = { ...context, ...fileContext }\n      } catch (error) {\n        console.log(`${yellow('Warning:')} Failed to load context file: ${error}`)\n      }\n    }\n\n    // Interactive configuration\n    if (options.interactive && config.prompts?.length) {\n      console.log(`\\\\nüîß ${yellow('Interactive Configuration')}`)\n      const userContext = await interactivePrompt(config.prompts)\n      context = { ...context, ...userContext }\n    }\n\n    // Generate files\n    console.log(`\\\\nüî® ${yellow('Generating files...')}`)\n    \n    const result = engine.generateFromTemplate(templateDir, outputDir, context, {\n      includeOptional: true,\n      dryRun: options.dry,\n    })\n\n    // Show results\n    if (options.dry) {\n      console.log(`\\\\n${yellow('üìã')} Dry run - files not created:`)\n      result.files.forEach(file => {\n        console.log(`   ${gray('‚Ä¢')} ${file.path}`)\n      })\n    } else {\n      console.log(`\\\\n${green('‚úÖ')} Generated successfully:`)\n      result.files.forEach(file => {\n        console.log(`   ${green('‚úì')} ${file.path}`)\n      })\n\n      // Show next steps\n      console.log(`\\\\nüéØ Next steps:`)\n      console.log(`   1. Review generated files in: ${outputPath}`)\n      \n      if (config.dependencies?.length) {\n        console.log(`   2. Install dependencies: pnpm install ${config.dependencies.join(' ')}`)\n      }\n      \n      if (config.category === 'plugins') {\n        console.log(`   3. Register plugin in your Hatago server`)\n        console.log(`   4. Start development server: hatago dev`)\n      }\n    }\n\n  } catch (error) {\n    if (error instanceof CLIError) {\n      throw error\n    }\n    throw new CLIError(`Scaffolding failed: ${error}`, 1)\n  }\n}\n\n/**\n * Create scaffold command\n */\nexport const scaffoldCommand = new Command('scaffold')\n  .description('Generate code from templates')\n  .argument('[template]', 'Template name to use')\n  .argument('[name]', 'Name for the generated output')\n  .option('-t, --template <name>', 'Template name (alternative to positional argument)')\n  .option('-o, --output <dir>', 'Output directory', '.')\n  .option('-c, --category <category>', 'Filter templates by category')\n  .option('-l, --list', 'List available templates')\n  .option('--info', 'Show detailed template information')\n  .option('-i, --interactive', 'Interactive configuration mode')\n  .option('--context <file>', 'Load context from JSON file')\n  .option('--dry', 'Show what would be generated without creating files')\n  .option('-f, --force', 'Overwrite existing files')\n  .action(handleScaffold)\n\n// Add help examples  \nscaffoldCommand.on('--help', () => {\n  console.log(`\nExamples:\n  # List all templates\n  hatago scaffold --list\n  \n  # List templates by category\n  hatago scaffold --list --category plugins\n  \n  # Show template information\n  hatago scaffold --info basic\n  \n  # Generate from template\n  hatago scaffold basic my-plugin\n  \n  # Interactive mode\n  hatago scaffold basic my-plugin --interactive\n  \n  # Custom output directory\n  hatago scaffold basic my-plugin --output ./plugins\n  \n  # Use context file\n  hatago scaffold basic my-plugin --context ./config.json\n  \n  # Dry run to preview\n  hatago scaffold basic my-plugin --dry\n`)\n})"],"mappings":"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","names":["Command","readFileSync","fileURLToPath","dirname","join","yellow","red","yellow","cyan","ConfigValidationError","cyan","yellow","ConfigValidationError","red","Command","writeFileSync","existsSync","resolve","green","cyan","generateConfigTemplate","outputResult","generateConfigTemplate","handleInit","resolve","existsSync","cyan","writeFileSync","green","Command","Command","resolve","existsSync","green","red","yellow","cyan","blue","loadConfig","outputResult","existsSync","resolve","cyan","yellow","red","green","loadConfig","blue","Command","Command","writeFileSync","resolve","green","red","yellow","cyan","loadConfig","validateConfig","ConfigValidationError","outputResult","resolve","cyan","loadConfig","validateConfig","ConfigValidationError","red","yellow","writeFileSync","green","Command","Command","resolve","join","dirname","existsSync","green","red","yellow","cyan","blue","gray","outputResult","promptInput","resolve","index","cyan","blue","gray","red","yellow","__dirname","dirname","existsSync","join","green","Command","Command","resolve","join","dirname","fileURLToPath","existsSync","green","red","yellow","cyan","blue","gray","TemplateEngine","outputResult","getTemplatesDir","__dirname","dirname","fileURLToPath","resolve","existsSync","TemplateEngine","cyan","yellow","blue","green","gray","red","interactivePrompt","join","Command","dirname","fileURLToPath","join","readFileSync","Command"]}