{"numTotalTestSuites":26,"numPassedTestSuites":26,"numFailedTestSuites":0,"numPendingTestSuites":0,"numTotalTests":60,"numPassedTests":24,"numFailedTests":0,"numPendingTests":9,"numTodoTests":0,"snapshot":{"added":0,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0,"didUpdate":false},"startTime":1755337146834,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["MCP Server Integration","Full MCP Protocol Flow"],"fullName":"MCP Server Integration Full MCP Protocol Flow should handle complete MCP interaction flow","status":"skipped","title":"should handle complete MCP interaction flow","failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Server Integration","Full MCP Protocol Flow"],"fullName":"MCP Server Integration Full MCP Protocol Flow should handle progress notifications","status":"skipped","title":"should handle progress notifications","failureMessages":[],"meta":{}},{"ancestorTitles":["MCP Server Integration","Full MCP Protocol Flow"],"fullName":"MCP Server Integration Full MCP Protocol Flow should handle errors properly","status":"skipped","title":"should handle errors properly","failureMessages":[],"meta":{}}],"startTime":1755337146834,"endTime":1755337146834,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/integration/mcp-server.test.ts"},{"assertionResults":[{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should create app with default options","status":"passed","title":"should create app with default options","duration":0.9191670000000158,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should create app with custom name and version","status":"passed","title":"should create app with custom name and version","duration":3.402917000000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should apply plugins","status":"passed","title":"should apply plugins","duration":1.3437089999999898,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should pass environment variables to context","status":"passed","title":"should pass environment variables to context","duration":0.12012499999997317,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should add health endpoint in HTTP mode","status":"passed","title":"should add health endpoint in HTTP mode","duration":0.8190830000000346,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","HTTP mode"],"fullName":"createApp HTTP mode should add root endpoint in HTTP mode","status":"passed","title":"should add root endpoint in HTTP mode","duration":0.6118750000000546,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","stdio mode"],"fullName":"createApp stdio mode should create server without app in stdio mode","status":"passed","title":"should create server without app in stdio mode","duration":0.09333400000002712,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","stdio mode"],"fullName":"createApp stdio mode should not add HTTP endpoints in stdio mode","status":"passed","title":"should not add HTTP endpoints in stdio mode","duration":0.049374999999997726,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","stdio mode"],"fullName":"createApp stdio mode should still apply plugins in stdio mode","status":"passed","title":"should still apply plugins in stdio mode","duration":0.3793340000000285,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp","getBaseUrl helper"],"fullName":"createApp getBaseUrl helper should extract base URL from request","status":"passed","title":"should extract base URL from request","duration":0.12929100000002336,"failureMessages":[],"meta":{}}],"startTime":1755337147136,"endTime":1755337147144.1294,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/app.test.ts"},{"assertionResults":[{"ancestorTitles":["Logger","Log Level Management"],"fullName":"Logger Log Level Management should respect LOG_LEVEL environment variable","status":"pending","title":"should respect LOG_LEVEL environment variable","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Log Level Management"],"fullName":"Logger Log Level Management should filter logs by level","status":"pending","title":"should filter logs by level","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Log Level Management"],"fullName":"Logger Log Level Management should handle level hierarchy correctly","status":"pending","title":"should handle level hierarchy correctly","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Log Level Management"],"fullName":"Logger Log Level Management should update global log level","status":"pending","title":"should update global log level","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Output Format"],"fullName":"Logger Output Format should use pretty format by default","status":"pending","title":"should use pretty format by default","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Output Format"],"fullName":"Logger Output Format should use JSON format when configured","status":"pending","title":"should use JSON format when configured","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Output Format"],"fullName":"Logger Output Format should handle color output based on environment","status":"pending","title":"should handle color output based on environment","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Output Format"],"fullName":"Logger Output Format should disable colors when NO_COLOR is set","status":"pending","title":"should disable colors when NO_COLOR is set","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Transport Mode Handling"],"fullName":"Logger Transport Mode Handling should route all output to stderr in stdio mode","status":"pending","title":"should route all output to stderr in stdio mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Transport Mode Handling"],"fullName":"Logger Transport Mode Handling should route appropriately in HTTP mode","status":"pending","title":"should route appropriately in HTTP mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Transport Mode Handling"],"fullName":"Logger Transport Mode Handling should guard stdout in stdio mode","status":"pending","title":"should guard stdout in stdio mode","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","PII Masking"],"fullName":"Logger PII Masking should mask sensitive keys by default","status":"pending","title":"should mask sensitive keys by default","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","PII Masking"],"fullName":"Logger PII Masking should use Noren for advanced PII detection when enabled","status":"pending","title":"should use Noren for advanced PII detection when enabled","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","PII Masking"],"fullName":"Logger PII Masking should handle Noren failure gracefully","status":"pending","title":"should handle Noren failure gracefully","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","PII Masking"],"fullName":"Logger PII Masking should allow disabling PII masking","status":"pending","title":"should allow disabling PII masking","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","PII Masking"],"fullName":"Logger PII Masking should handle custom redact keys","status":"pending","title":"should handle custom redact keys","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Child Logger"],"fullName":"Logger Child Logger should inherit configuration from parent","status":"pending","title":"should inherit configuration from parent","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Child Logger"],"fullName":"Logger Child Logger should preserve parent context in child","status":"pending","title":"should preserve parent context in child","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Child Logger"],"fullName":"Logger Child Logger should override parent context when same key is used","status":"pending","title":"should override parent context when same key is used","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Sampling and Rate Limiting"],"fullName":"Logger Sampling and Rate Limiting should respect sample rate","status":"pending","title":"should respect sample rate","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Sampling and Rate Limiting"],"fullName":"Logger Sampling and Rate Limiting should never sample fatal and error levels","status":"pending","title":"should never sample fatal and error levels","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Error Handling and Fallback"],"fullName":"Logger Error Handling and Fallback should handle write errors gracefully","status":"pending","title":"should handle write errors gracefully","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Error Handling and Fallback"],"fullName":"Logger Error Handling and Fallback should handle JSON serialization errors","status":"pending","title":"should handle JSON serialization errors","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Error Handling and Fallback"],"fullName":"Logger Error Handling and Fallback should exit process on fatal level","status":"pending","title":"should exit process on fatal level","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Metadata and Context"],"fullName":"Logger Metadata and Context should include transport and session information","status":"pending","title":"should include transport and session information","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Metadata and Context"],"fullName":"Logger Metadata and Context should format error information properly","status":"pending","title":"should format error information properly","failureMessages":[],"meta":{}},{"ancestorTitles":["Logger","Metadata and Context"],"fullName":"Logger Metadata and Context should handle method and tool context","status":"pending","title":"should handle method and tool context","failureMessages":[],"meta":{}}],"startTime":1755337146834,"endTime":1755337146834,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/logger.test.ts"},{"assertionResults":[{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should apply single plugin","status":"passed","title":"should apply single plugin","duration":1.4822920000000295,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should apply multiple plugins in order","status":"passed","title":"should apply multiple plugins in order","duration":0.21545800000001236,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should handle async plugins","status":"passed","title":"should handle async plugins","duration":10.468125000000043,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should throw on plugin errors","status":"passed","title":"should throw on plugin errors","duration":0.6184170000000222,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should pass context to all plugins","status":"passed","title":"should pass context to all plugins","duration":1.06008300000002,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should handle empty plugin array","status":"passed","title":"should handle empty plugin array","duration":0.17362500000001546,"failureMessages":[],"meta":{}},{"ancestorTitles":["applyPlugins"],"fullName":"applyPlugins should allow plugins to modify context","status":"passed","title":"should allow plugins to modify context","duration":0.25466599999998607,"failureMessages":[],"meta":{}}],"startTime":1755337147127,"endTime":1755337147142.2546,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/plugins.test.ts"},{"assertionResults":[{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should register hello_hatago tool","status":"skipped","title":"should register hello_hatago tool","failureMessages":[],"meta":{}},{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should return text content without progress token","status":"skipped","title":"should return text content without progress token","failureMessages":[],"meta":{}},{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should send progress notifications when token provided","status":"skipped","title":"should send progress notifications when token provided","failureMessages":[],"meta":{}},{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should handle notification errors gracefully","status":"skipped","title":"should handle notification errors gracefully","failureMessages":[],"meta":{}},{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should work without sendNotification function","status":"skipped","title":"should work without sendNotification function","failureMessages":[],"meta":{}},{"ancestorTitles":["helloHatago plugin"],"fullName":"helloHatago plugin should send correct number of progress notifications","status":"skipped","title":"should send correct number of progress notifications","failureMessages":[],"meta":{}}],"startTime":1755337146834,"endTime":1755337146834,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/core/tests/unit/plugins/hello-hatago.test.ts"},{"assertionResults":[{"ancestorTitles":["createApp (Node.js adapter)"],"fullName":"createApp (Node.js adapter) should create app with default plugins","status":"passed","title":"should create app with default plugins","duration":1.5977080000000115,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp (Node.js adapter)"],"fullName":"createApp (Node.js adapter) should convert Node.js env to generic record","status":"passed","title":"should convert Node.js env to generic record","duration":0.5832919999999717,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp (Node.js adapter)"],"fullName":"createApp (Node.js adapter) should use custom plugins when provided","status":"passed","title":"should use custom plugins when provided","duration":0.4289590000000203,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp (Node.js adapter)"],"fullName":"createApp (Node.js adapter) should work in stdio mode","status":"passed","title":"should work in stdio mode","duration":0.12616700000000947,"failureMessages":[],"meta":{}},{"ancestorTitles":["createApp (Node.js adapter)"],"fullName":"createApp (Node.js adapter) should create app without default plugins (debug test)","status":"passed","title":"should create app without default plugins (debug test)","duration":0.13212499999997362,"failureMessages":[],"meta":{}}],"startTime":1755337147232,"endTime":1755337147234.429,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/adapter-node/tests/unit/app.test.ts"},{"assertionResults":[{"ancestorTitles":["stdio server"],"fullName":"stdio server should have stdio server implementation","status":"passed","title":"should have stdio server implementation","duration":0.5524580000000014,"failureMessages":[],"meta":{}},{"ancestorTitles":["stdio server"],"fullName":"stdio server should export stdio server function","status":"passed","title":"should export stdio server function","duration":147.50983399999998,"failureMessages":[],"meta":{}}],"startTime":1755337147082,"endTime":1755337147230.5098,"status":"passed","message":"","name":"/Users/morishige/ghq/github.com/himorishige/hatago/packages/adapter-node/tests/unit/stdio.test.ts"}]}